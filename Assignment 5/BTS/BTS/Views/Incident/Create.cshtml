@model BTS.Controllers.IncidentAddForm

@{
    ViewBag.Title = "Create";
    var userAccount = new BTS.Controllers.UserAccount(User as System.Security.Claims.ClaimsPrincipal);
}

<h2>Create</h2>
<script src="@Url.Content("~/Scripts/jquery-2.2.1.min.js")" type="text/javascript"></script>



<script type="text/javascript">
    $(document).ready(function () {
        $("#myButton").click(function () {

            var el=document.getElementsByTagName("*");
            for(i=0;i<el.length;i++)
                if(el[i].style.display=="none"){
                    el[i].style.display="";
                    break;
                }

        });
    });

</script>


<script type="text/javascript">
    $(document).ready(function () {
        $("#myButton1").click(function () {
            
            var rowCount = $("#studnames").length;
            var html1 = '<div class="form-group" id="studnames">' +
                @Html.LabelFor(model => model.StudentName, htmlAttributes: new { @class = "control-label col-md-2" })' +
                '<div class="col-md-10">' +
                    '@Html.EditorFor(model => model.StudentName, new { htmlAttributes = new { @class = "form-control" } })' +
                    '@Html.ValidationMessageFor(model => model.StudentName, "", new { @class = "text-danger" })' +
                '</div>' +
            '</div>';


            var html2    = '<div class="form-group" id="studids">' +
                '@Html.LabelFor(model => model.StudentId, htmlAttributes: new { @class = "control-label col-md-2" })' +
                '<div class="col-md-10">' +
                    '@Html.EditorFor(model => model.StudentId, new { htmlAttributes = new { @class = "form-control" } })' +
                    '@Html.ValidationMessageFor(model => model.StudentId, "", new { @class = "text-danger" })' +
                '</div>' +
            '</div>';

            $("#studnames").append(html1);
            $("#studids").append(html2);        
            //$("#students").append(html);
        });
    });

</script>


@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>IncidentAddForm</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.IncidentDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IncidentDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IncidentDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <br /> 

        <div id="students">
            <div class="form-group" id="studnames">
                @Html.LabelFor(model => model.StudentName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.StudentName[0], new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.StudentName[0], "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group" id="studids">
                @Html.LabelFor(model => model.StudentId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.StudentId[0], new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.StudentId[0], "", new { @class = "text-danger" })
                </div>
            </div>
        </div>


        @for (int i = 1; i < Model.StudentId.Count(); i++)
        {
            if (Model.StudentId[i] != "")
            {
                <div id="students">
                    <div class="form-group" id="studnames">
                        @Html.LabelFor(model => model.StudentName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.StudentName[@i], new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.StudentName[@i], "", new { @class = "text-danger" })
                        </div>
                    </div>


                    <div class="form-group" id="studids">
                        @Html.LabelFor(model => model.StudentId, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.StudentId[@i], new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.StudentId[@i], "", new { @class = "text-danger" }) 
                        </div>
                    </div>
                </div>
            }
            else {
                <div id="students" style="display:none">
                    <div class="form-group" id="studnames">
                        @Html.LabelFor(model => model.StudentName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.StudentName[@i], new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.StudentName[@i], "", new { @class = "text-danger" })
                        </div>
                    </div>


                    <div class="form-group" id="studids">
                        @Html.LabelFor(model => model.StudentId, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.StudentId[@i], new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.StudentId[@i], "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            }
        }

        <input type="button" id="myButton" value="Add student" />
        <br /> 

        <div class="form-group">
            @Html.LabelFor(model => model.InstructorName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.InstructorName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.InstructorName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.coursecode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.coursecode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.coursecode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.campus, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.campus, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.campus, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.program, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.program, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.program, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DocUpload, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DocUpload, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DocUpload, "", new { @class = "text-danger" })
            </div>
        </div>

        <div>
            @Html.LabelFor(model => model.isMinor, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.CheckBoxFor(model => model.isMinor)
                </div>
                @Html.ValidationMessageFor(model => model.isMinor, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
